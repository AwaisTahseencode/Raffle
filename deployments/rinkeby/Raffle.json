{
  "address": "0x261810CB2dB9b28ee19b90Efec6Bf19fFa853a77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinateV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subid",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__notOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "successTransactionError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "raffleEnterWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeRet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.raffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x002a981abbec6f7f3562aed885ee6f47c5a258cd5acb74d2e0180478c73b1dba",
  "receipt": {
    "to": null,
    "from": "0xA9839371689B1304E8cebbC477c32ab8A90681c6",
    "contractAddress": "0x261810CB2dB9b28ee19b90Efec6Bf19fFa853a77",
    "transactionIndex": 11,
    "gasUsed": "1209308",
    "logsBloom": "0x
    "blockHash": "0xffd0717603ad7394d080f49039c52746a686553e0a6ae3c850dae2812bd861b4",
    "transactionHash": "0x002a981abbec6f7f3562aed885ee6f47c5a258cd5acb74d2e0180478c73b1dba",
    "logs": [],
    "blockNumber": 11159263,
    "cumulativeGasUsed": "2457093",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "9741",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "80f626d37c9f6a700ae086aa5ec83261",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinateV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subid\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__notOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Raffle__upkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"successTransactionError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"raffleEnterWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeRet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.raffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\npragma solidity 0.8.8;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n//Errors\\r\\nerror Raffle__NotEnoughEthEntered();\\r\\nerror Raffle__notOpen();\\r\\nerror successTransactionError();\\r\\nerror Raffle__upkeepNotNeeded(uint256 balance,uint256 players,uint256 state);\\r\\n//contract\\r\\ncontract Raffle is  VRFConsumerBaseV2,KeeperCompatibleInterface{\\r\\n    //natSpec\\r\\n    /**\\r\\n    @title a sample project\\r\\n    @author Awais Tahseen\\r\\n    @notice This contract is for untemperable decentralised smart contract lottery\\r\\n    @dev this implements chaiklink vrf v2 and chainlink keepers\\r\\n    */ \\r\\n    //enums\\r\\n    enum raffleState{\\r\\n        OPEN,CALCULATING\\r\\n    }\\r\\n    //state Variables\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable [] private  funders;\\r\\n    // VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint64 private immutable i_subId;\\r\\n    bytes32 private immutable i_gasLane;//gaslane is same as keyHash\\r\\n    uint16 private constant REQUEST_CONFIRMATION=3;\\r\\n    uint32 private immutable i_callBackGasLimit;\\r\\n    uint32 private constant RANDOM_WORDS=1;\\r\\n\\r\\n//Lottery variables \\r\\naddress private s_recentWinner;\\r\\nraffleState private s_rafflePresentState;\\r\\nuint256 private s_lastTimeStamp;\\r\\nuint256 private immutable i_interval;\\r\\n    //Events\\r\\n    event raffleEnter(address indexed player);\\r\\n    event raffleEnterWinner(uint256 indexed requestId);\\r\\n    event winnerPicked(address indexed winner);\\r\\n    //Constructor\\r\\n    constructor(address vrfCoordinateV2,\\r\\n    uint256 entranceFee,\\r\\n    bytes32 gasLane,\\r\\n    uint64 subid,\\r\\n    uint32 callBackGasLimit,\\r\\n    uint256 interval\\r\\n            ) \\r\\n    VRFConsumerBaseV2(vrfCoordinateV2) {\\r\\n        i_entranceFee=entranceFee;\\r\\n        i_gasLane=gasLane;\\r\\n        i_vrfCoordinator=VRFCoordinatorV2Interface(vrfCoordinateV2);\\r\\n        i_subId=subid;\\r\\n        i_callBackGasLimit=callBackGasLimit;\\r\\n        //we can also say that s_rafflePresentState=raffleState(0);\\r\\n        s_rafflePresentState=raffleState.OPEN;\\r\\n        s_lastTimeStamp=block.timestamp;\\r\\n        i_interval=interval;\\r\\n    }\\r\\n    function enterRaffle() public payable{\\r\\n        if(msg.value<i_entranceFee){\\r\\n        revert Raffle__NotEnoughEthEntered();\\r\\n\\r\\n        }\\r\\n        if(s_rafflePresentState!=raffleState.OPEN)\\r\\n        {\\r\\n            revert Raffle__notOpen();}\\r\\n    funders.push(payable(msg.sender));\\r\\n    emit raffleEnter(msg.sender);\\r\\n    }\\r\\n    //checkUpKeep and performUpKeep\\r\\n\\r\\n    //we are making checkUpkeep function public instead of external so\\r\\n    //our own SC call call it\\r\\n\\r\\n    function checkUpkeep(bytes memory /*callData*/)public override\\r\\n    returns (bool upkeepNeeded,bytes memory /*perform data*/ ){\\r\\n        bool isOpen=(raffleState.OPEN==s_rafflePresentState);\\r\\n        //for current time we use global variables like block.timestamp\\r\\n        bool isTimePassed=((block.timestamp-s_lastTimeStamp)>i_interval);\\r\\n        bool hasPlayers=(funders.length>0);\\r\\n        bool hasBalance=(address(this).balance>0);\\r\\n        //we'll return all bools as upkeepNeeded \\r\\n        upkeepNeeded=(isOpen && isTimePassed && hasBalance && hasPlayers);\\r\\n        //perform data is something if we want the checkUpkey to perform something else for us\\r\\n    }\\r\\n    //we can change requestRandomWinners to performUpkeep\\r\\n    //Request Random winners\\r\\nfunction performUpkeep(bytes calldata /*performData */)external override{\\r\\n    //i_vrfCoordinator will return a request id that who is requesting it so we can save it \\r\\n    // we have to check the condition in order to proceed further\\r\\n    (bool upkeepNeeded,)=checkUpkeep(\\\"\\\");\\r\\n    //we ll pass some params in this error so other people know why this error is going on\\r\\n    if(!upkeepNeeded)\\r\\n    revert Raffle__upkeepNotNeeded(address(this).balance,funders.length,uint256(s_rafflePresentState));\\r\\n    s_rafflePresentState=raffleState.OPEN;\\r\\n    uint256 requestId= i_vrfCoordinator.requestRandomWords(\\r\\n        i_gasLane,\\r\\n        i_subId,\\r\\n        REQUEST_CONFIRMATION,\\r\\n        i_callBackGasLimit,\\r\\n        RANDOM_WORDS\\r\\n        //keyHash,subcriptionId,requestConfirmation,callBackGasLimit,numWords\\r\\n    );\\r\\n        emit raffleEnterWinner(requestId);\\r\\n}\\r\\nfunction fulfillRandomWords(uint256 /*requestId*/,uint256[] memory randomWords) internal override {\\r\\n    s_rafflePresentState=raffleState.OPEN;\\r\\n    uint256 indexOfWinner=randomWords[0]%funders.length;\\r\\n    address payable recentWinner=funders[indexOfWinner];\\r\\n    s_recentWinner=recentWinner;\\r\\n    (bool success,)=recentWinner.call{value:address(this).balance}(\\\"\\\");\\r\\n    if(!success)\\r\\n    revert successTransactionError();\\r\\n    //after picking a player we have to reset the array so for that\\r\\n    funders = new address payable[](0);\\r\\n    s_lastTimeStamp=block.timestamp;\\r\\n    emit winnerPicked(recentWinner);\\r\\n}\\r\\n//pure/view functions\\r\\nfunction entranceFeeRet()public view returns (uint256){\\r\\n    return i_entranceFee;\\r\\n}\\r\\nfunction getRecentWinner() public view returns(address){\\r\\n    return s_recentWinner;\\r\\n}\\r\\nfunction getPlayer(uint index )public view returns (address)\\r\\n{\\r\\n    return funders[index];\\r\\n}\\r\\nfunction getRaffleState() public view returns (raffleState){\\r\\nreturn s_rafflePresentState;\\r\\n}\\r\\n//if the variable is contant so function will not read it from the storage then its better to make it pure\\r\\nfunction getNumWords() public pure returns (uint256){\\r\\n    return RANDOM_WORDS;\\r\\n}\\r\\nfunction numberOfPlayers() public view returns (uint256){\\r\\n    return funders.length;\\r\\n}\\r\\nfunction getLastTimeStamp() public view returns(uint256){\\r\\n    return s_lastTimeStamp;\\r\\n}\\r\\nfunction getRequestConfirmations() public pure returns(uint256){\\r\\nreturn REQUEST_CONFIRMATION;\\r\\n}\\r\\nfunction getInterval() public view returns(uint256){\\r\\n    return i_interval;\\r\\n}\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xaf1fe970e5701f54b3a12048de047ea5c276e1d15e3a9ea4b7a4e6e75d3e67ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001833380380620018338339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508361010081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e05160c01c610100516101205160e01c6101405161144c620003e7600039600081816107c50152610867015260006106740152600061063001526000610651015260006105f40152600081816103cf015261083f01526000818161030f0152610363015261144c6000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f578063892666ec11610059578063892666ec1461023857806391ad27b414610263578063c1c244e81461028e578063e55ae4e8146102b9576100c2565b80635f1b0fd8146101a45780636e04ff0d146101cf5780636f4bda171461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b5780634585e33b14610125578063473f1ddc1461014e57806353a2c19a14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c2b565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610de9565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061014c60048036038101906101479190610ea0565b61053c565b005b34801561015a57600080fd5b5061016361073c565b6040516101709190610f2e565b60405180910390f35b34801561018557600080fd5b5061018e610766565b60405161019b9190610f58565b60405180910390f35b3480156101b057600080fd5b506101b9610775565b6040516101c69190610f58565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f19190611028565b610782565b604051610204929190611114565b60405180910390f35b34801561021957600080fd5b5061022261082f565b60405161022f9190610f58565b60405180910390f35b34801561024457600080fd5b5061024d61083b565b60405161025a9190610f58565b60405180910390f35b34801561026f57600080fd5b50610278610863565b6040516102859190610f58565b60405180910390f35b34801561029a57600080fd5b506102a361088b565b6040516102b09190610f58565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190611144565b610895565b6040516102ed9190610f2e565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b6929190611171565b60405180910390fd5b6103c982826108dc565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610bb4565b5b600160149054906101000a900460ff16600181111561045d5761045c610bb4565b5b14610494576040517f4ff3426e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b600061055660405180602001604052806000815250610782565b509050806105c55747600080549050600160149054906101000a900460ff16600181111561058757610586610bb4565b5b6040517f837325cd0000000000000000000000000000000000000000000000000000000081526004016105bc9392919061119a565b60405180910390fd5b6000600160146101000a81548160ff021916908360018111156105eb576105ea610bb4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106b5959493929190611249565b602060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070791906112b1565b9050807f6af1ec768296a0ca9493d609cf467ead0d4fdc22d48090195166993c8ecc7cdd60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107aa576107a9610bb4565b5b600060018111156107be576107bd610bb4565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107f2919061130d565b119050600080600080549050119050600080471190508380156108125750825b801561081b5750805b80156108245750815b955050505050915091565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008082815481106108aa576108a9611341565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160146101000a81548160ff0219169083600181111561090257610901610bb4565b5b0217905550600080805490508260008151811061092257610921611341565b5b6020026020010151610934919061139f565b9050600080828154811061094b5761094a611341565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109df90611401565b60006040518083038185875af1925050503d8060008114610a1c576040519150601f19603f3d011682016040523d82523d6000602084013e610a21565b606091505b5050905080610a5c576040517ffd65c6d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610a7757610a76610ca6565b5b604051908082528060200260200182016040528015610aa55781602001602082028036833780820191505090505b5060009080519060200190610abb929190610b0d565b50426002819055508173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610b86579160200282015b82811115610b855782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2d565b5b509050610b939190610b97565b5090565b5b80821115610bb0576000816000905550600101610b98565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf457610bf3610bb4565b5b50565b6000819050610c0582610be3565b919050565b6000610c1582610bf7565b9050919050565b610c2581610c0a565b82525050565b6000602082019050610c406000830184610c1c565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6d81610c5a565b8114610c7857600080fd5b50565b600081359050610c8a81610c64565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cde82610c95565b810181811067ffffffffffffffff82111715610cfd57610cfc610ca6565b5b80604052505050565b6000610d10610c46565b9050610d1c8282610cd5565b919050565b600067ffffffffffffffff821115610d3c57610d3b610ca6565b5b602082029050602081019050919050565b600080fd5b6000610d65610d6084610d21565b610d06565b90508083825260208201905060208402830185811115610d8857610d87610d4d565b5b835b81811015610db15780610d9d8882610c7b565b845260208401935050602081019050610d8a565b5050509392505050565b600082601f830112610dd057610dcf610c90565b5b8135610de0848260208601610d52565b91505092915050565b60008060408385031215610e0057610dff610c50565b5b6000610e0e85828601610c7b565b925050602083013567ffffffffffffffff811115610e2f57610e2e610c55565b5b610e3b85828601610dbb565b9150509250929050565b600080fd5b60008083601f840112610e6057610e5f610c90565b5b8235905067ffffffffffffffff811115610e7d57610e7c610e45565b5b602083019150836001820283011115610e9957610e98610d4d565b5b9250929050565b60008060208385031215610eb757610eb6610c50565b5b600083013567ffffffffffffffff811115610ed557610ed4610c55565b5b610ee185828601610e4a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1882610eed565b9050919050565b610f2881610f0d565b82525050565b6000602082019050610f436000830184610f1f565b92915050565b610f5281610c5a565b82525050565b6000602082019050610f6d6000830184610f49565b92915050565b600080fd5b600067ffffffffffffffff821115610f9357610f92610ca6565b5b610f9c82610c95565b9050602081019050919050565b82818337600083830152505050565b6000610fcb610fc684610f78565b610d06565b905082815260208101848484011115610fe757610fe6610f73565b5b610ff2848285610fa9565b509392505050565b600082601f83011261100f5761100e610c90565b5b813561101f848260208601610fb8565b91505092915050565b60006020828403121561103e5761103d610c50565b5b600082013567ffffffffffffffff81111561105c5761105b610c55565b5b61106884828501610ffa565b91505092915050565b60008115159050919050565b61108681611071565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110c65780820151818401526020810190506110ab565b838111156110d5576000848401525b50505050565b60006110e68261108c565b6110f08185611097565b93506111008185602086016110a8565b61110981610c95565b840191505092915050565b6000604082019050611129600083018561107d565b818103602083015261113b81846110db565b90509392505050565b60006020828403121561115a57611159610c50565b5b600061116884828501610c7b565b91505092915050565b60006040820190506111866000830185610f1f565b6111936020830184610f1f565b9392505050565b60006060820190506111af6000830186610f49565b6111bc6020830185610f49565b6111c96040830184610f49565b949350505050565b6000819050919050565b6111e4816111d1565b82525050565b600067ffffffffffffffff82169050919050565b611207816111ea565b82525050565b600061ffff82169050919050565b6112248161120d565b82525050565b600063ffffffff82169050919050565b6112438161122a565b82525050565b600060a08201905061125e60008301886111db565b61126b60208301876111fe565b611278604083018661121b565b611285606083018561123a565b611292608083018461123a565b9695505050505050565b6000815190506112ab81610c64565b92915050565b6000602082840312156112c7576112c6610c50565b5b60006112d58482850161129c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131882610c5a565b915061132383610c5a565b925082821015611336576113356112de565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113aa82610c5a565b91506113b583610c5a565b9250826113c5576113c4611370565b5b828206905092915050565b600081905092915050565b50565b60006113eb6000836113d0565b91506113f6826113db565b600082019050919050565b600061140c826113de565b915081905091905056fea2646970667358221220610a334dafabf3c265b71250e68f2365b71a0cbb846837e362f659570d4402f264736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635f1b0fd81161007f578063892666ec11610059578063892666ec1461023857806391ad27b414610263578063c1c244e81461028e578063e55ae4e8146102b9576100c2565b80635f1b0fd8146101a45780636e04ff0d146101cf5780636f4bda171461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b5780634585e33b14610125578063473f1ddc1461014e57806353a2c19a14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c2b565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610de9565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061014c60048036038101906101479190610ea0565b61053c565b005b34801561015a57600080fd5b5061016361073c565b6040516101709190610f2e565b60405180910390f35b34801561018557600080fd5b5061018e610766565b60405161019b9190610f58565b60405180910390f35b3480156101b057600080fd5b506101b9610775565b6040516101c69190610f58565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f19190611028565b610782565b604051610204929190611114565b60405180910390f35b34801561021957600080fd5b5061022261082f565b60405161022f9190610f58565b60405180910390f35b34801561024457600080fd5b5061024d61083b565b60405161025a9190610f58565b60405180910390f35b34801561026f57600080fd5b50610278610863565b6040516102859190610f58565b60405180910390f35b34801561029a57600080fd5b506102a361088b565b6040516102b09190610f58565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190611144565b610895565b6040516102ed9190610f2e565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b6929190611171565b60405180910390fd5b6103c982826108dc565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610bb4565b5b600160149054906101000a900460ff16600181111561045d5761045c610bb4565b5b14610494576040517f4ff3426e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b600061055660405180602001604052806000815250610782565b509050806105c55747600080549050600160149054906101000a900460ff16600181111561058757610586610bb4565b5b6040517f837325cd0000000000000000000000000000000000000000000000000000000081526004016105bc9392919061119a565b60405180910390fd5b6000600160146101000a81548160ff021916908360018111156105eb576105ea610bb4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106b5959493929190611249565b602060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070791906112b1565b9050807f6af1ec768296a0ca9493d609cf467ead0d4fdc22d48090195166993c8ecc7cdd60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107aa576107a9610bb4565b5b600060018111156107be576107bd610bb4565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107f2919061130d565b119050600080600080549050119050600080471190508380156108125750825b801561081b5750805b80156108245750815b955050505050915091565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008082815481106108aa576108a9611341565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160146101000a81548160ff0219169083600181111561090257610901610bb4565b5b0217905550600080805490508260008151811061092257610921611341565b5b6020026020010151610934919061139f565b9050600080828154811061094b5761094a611341565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109df90611401565b60006040518083038185875af1925050503d8060008114610a1c576040519150601f19603f3d011682016040523d82523d6000602084013e610a21565b606091505b5050905080610a5c576040517ffd65c6d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610a7757610a76610ca6565b5b604051908082528060200260200182016040528015610aa55781602001602082028036833780820191505090505b5060009080519060200190610abb929190610b0d565b50426002819055508173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610b86579160200282015b82811115610b855782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2d565b5b509050610b939190610b97565b5090565b5b80821115610bb0576000816000905550600101610b98565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf457610bf3610bb4565b5b50565b6000819050610c0582610be3565b919050565b6000610c1582610bf7565b9050919050565b610c2581610c0a565b82525050565b6000602082019050610c406000830184610c1c565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6d81610c5a565b8114610c7857600080fd5b50565b600081359050610c8a81610c64565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cde82610c95565b810181811067ffffffffffffffff82111715610cfd57610cfc610ca6565b5b80604052505050565b6000610d10610c46565b9050610d1c8282610cd5565b919050565b600067ffffffffffffffff821115610d3c57610d3b610ca6565b5b602082029050602081019050919050565b600080fd5b6000610d65610d6084610d21565b610d06565b90508083825260208201905060208402830185811115610d8857610d87610d4d565b5b835b81811015610db15780610d9d8882610c7b565b845260208401935050602081019050610d8a565b5050509392505050565b600082601f830112610dd057610dcf610c90565b5b8135610de0848260208601610d52565b91505092915050565b60008060408385031215610e0057610dff610c50565b5b6000610e0e85828601610c7b565b925050602083013567ffffffffffffffff811115610e2f57610e2e610c55565b5b610e3b85828601610dbb565b9150509250929050565b600080fd5b60008083601f840112610e6057610e5f610c90565b5b8235905067ffffffffffffffff811115610e7d57610e7c610e45565b5b602083019150836001820283011115610e9957610e98610d4d565b5b9250929050565b60008060208385031215610eb757610eb6610c50565b5b600083013567ffffffffffffffff811115610ed557610ed4610c55565b5b610ee185828601610e4a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1882610eed565b9050919050565b610f2881610f0d565b82525050565b6000602082019050610f436000830184610f1f565b92915050565b610f5281610c5a565b82525050565b6000602082019050610f6d6000830184610f49565b92915050565b600080fd5b600067ffffffffffffffff821115610f9357610f92610ca6565b5b610f9c82610c95565b9050602081019050919050565b82818337600083830152505050565b6000610fcb610fc684610f78565b610d06565b905082815260208101848484011115610fe757610fe6610f73565b5b610ff2848285610fa9565b509392505050565b600082601f83011261100f5761100e610c90565b5b813561101f848260208601610fb8565b91505092915050565b60006020828403121561103e5761103d610c50565b5b600082013567ffffffffffffffff81111561105c5761105b610c55565b5b61106884828501610ffa565b91505092915050565b60008115159050919050565b61108681611071565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110c65780820151818401526020810190506110ab565b838111156110d5576000848401525b50505050565b60006110e68261108c565b6110f08185611097565b93506111008185602086016110a8565b61110981610c95565b840191505092915050565b6000604082019050611129600083018561107d565b818103602083015261113b81846110db565b90509392505050565b60006020828403121561115a57611159610c50565b5b600061116884828501610c7b565b91505092915050565b60006040820190506111866000830185610f1f565b6111936020830184610f1f565b9392505050565b60006060820190506111af6000830186610f49565b6111bc6020830185610f49565b6111c96040830184610f49565b949350505050565b6000819050919050565b6111e4816111d1565b82525050565b600067ffffffffffffffff82169050919050565b611207816111ea565b82525050565b600061ffff82169050919050565b6112248161120d565b82525050565b600063ffffffff82169050919050565b6112438161122a565b82525050565b600060a08201905061125e60008301886111db565b61126b60208301876111fe565b611278604083018661121b565b611285606083018561123a565b611292608083018461123a565b9695505050505050565b6000815190506112ab81610c64565b92915050565b6000602082840312156112c7576112c6610c50565b5b60006112d58482850161129c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131882610c5a565b915061132383610c5a565b925082821015611336576113356112de565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113aa82610c5a565b91506113b583610c5a565b9250826113c5576113c4611370565b5b828206905092915050565b600081905092915050565b50565b60006113eb6000836113d0565b91506113f6826113db565b600082019050919050565b600061140c826113de565b915081905091905056fea2646970667358221220610a334dafabf3c265b71250e68f2365b71a0cbb846837e362f659570d4402f264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 870,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 890,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_rafflePresentState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(raffleState)865"
      },
      {
        "astId": 892,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(raffleState)865": {
        "encoding": "inplace",
        "label": "enum Raffle.raffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}